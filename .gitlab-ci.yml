include:
    - project: SocialGouv/gitlab-ci-yml
      file: /autodevops.yml
      ref: v23.3.0

variables:
    AUTO_DEVOPS_KANIKO: "🕹️"
    AUTO_DEVOPS_ENABLE_KAPP: "🕹️"
    AUTO_DEVOPS_RELEASE_AUTO: "🚀"

stages:
    - Install
    - Code Quality
    - Registration
    - Release
    - Deploy
    - Seed

Lint:
    rules:
        - when: never
#

Create seeds DB (dev):
    stage: Seed
    allow_failure: true
    environment:
        name: ${CI_COMMIT_REF_NAME}-dev
        url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
    image:
        name: node:14
    only:
        refs:
            - branches
    except:
        refs:
            - master
        variables:
            # Don't run when deploying in production or releasing
            - $PRODUCTION
            - $RELEASE
    variables:
        POSTGRES_SSL: "true"
        PGHOST: medledevserver.postgres.database.azure.com
        DATABASE_URL: postgresql://user_${CI_COMMIT_REF_SLUG}%40${PGHOST}:password_${CI_COMMIT_REF_SLUG}@${PGHOST}/autodevops_${CI_COMMIT_REF_SLUG}?sslmode=require
    script:
        - yarn --frozen-lockfile
        - yarn migrate:latest
        - yarn seed:run:staging

.production_rule: &autodevops_production_rule
  if: "$PRODUCTION && $CI_COMMIT_TAG"

# extracted from gitlab-ci for tmp fix on the ingress annotations
.base_deploy_kosko_stage:
  stage: Deploy
  image: ghcr.io/socialgouv/docker/no-k8s:6.48.0
  dependencies: []
  cache:
    key:
      files:
        - ${K8S_FOLDER}/yarn.lock
      prefix: ${CI_JOB_NAME}
    paths:
      - ${CI_PROJECT_DIR}/.cache
      - ${K8S_FOLDER}/node_modules
  script:
    - |
      if [[ -d "${CI_PROJECT_DIR}/.socialgouv" ]]; then
        echo "Use .socialgouv config."
        rm -rf /k8s/.socialgouv
        cp -r ${CI_PROJECT_DIR}/.socialgouv /k8s/
        if [[ -d "/k8s/.socialgouv/environments" ]]; then
          cp -r /k8s/.socialgouv/environments/* /k8s/.k8s/environments/
        fi
        if [[ -d "/k8s/.socialgouv/components" ]]; then
          cp -r /k8s/.socialgouv/components/* /k8s/.k8s/components/
        fi
        cd /k8s/.k8s
      else
        yarn config set cache-folder ${CI_PROJECT_DIR}/.cache/yarn
        cd ${K8S_FOLDER}
        yarn --production --frozen-lockfile --prefer-offline --link-duplicates
      fi
    #
    - echo "kosko generate ${KOSKO_GENERATE_ARGS} >> ${CI_PROJECT_DIR}/manifest.yaml"
    - kosko generate ${KOSKO_GENERATE_ARGS} > ${CI_PROJECT_DIR}/manifest.yaml
    #
    - cd -
    - |
      if [[ -d "${KOSKO_APPEND_YAML_FROM}" ]]; then
        echo "Append to ${CI_PROJECT_DIR}/manifest.yaml"
        find ${KOSKO_APPEND_YAML_FROM} -name '*.yaml'
        find ${KOSKO_APPEND_YAML_FROM} -name '*.yaml' -exec \
          echo '---' \; -exec cat {} \; \
        >> ${CI_PROJECT_DIR}/manifest.yaml
      fi
    # hack for new cert-manager annotations
    - sed -i '' -e /certmanager.k8s.io\/cluster-issuer/cert-manager.io\/cluster-issuer/ ${CI_PROJECT_DIR}/manifest.yaml
    - cat ${CI_PROJECT_DIR}/manifest.yaml
    #
    - |
      if [[ -n $AUTO_DEVOPS_ENABLE_KAPP ]]; then
        if [[ -z $PRODUCTION ]]; then
          kubectl create ns ${KUBE_NAMESPACE} || true
          kubectl annotate ns ${KUBE_NAMESPACE} azure-pg-admin-user=${CI_PROJECT_NAME} || true
        fi
        kapp --dangerous-override-ownership-of-existing-resources -y deploy -a ${CI_PROJECT_NAME} --namespace ${KUBE_NAMESPACE} -f ${CI_PROJECT_DIR}/manifest.yaml ${KAPP_DEPLOY_ARGS}
      else
        kubectl apply -f ${CI_PROJECT_DIR}/manifest.yaml
      fi
    - |
      echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      [[ -z $PRODUCTION ]] && GRAFANA_CLUSTER="dev2" || GRAFANA_CLUSTER="prod2";
      [[ -f "${CI_PROJECT_DIR}/manifest.yaml" ]] && yq e -N '.spec.rules[] .host' "${CI_PROJECT_DIR}/manifest.yaml" | grep -v null | sed -e s/^/\ \ 🚀\ https\:\\/\\// || true
      echo "  📕 logs : https://grafana.fabrique.social.gouv.fr/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki-tail%22,%7B%22expr%22:%22%7Bnamespace%3D%5C%22${KUBE_NAMESPACE}%5C%22%7D%22%7D%5D"
      echo "  📊 pods : https://grafana.fabrique.social.gouv.fr/d/85a562078cdf77779eaa1add43ccec1e/kubernetes-compute-resources-namespace-pods?orgId=1&refresh=10s&var-datasource=default&var-cluster=${GRAFANA_CLUSTER}&var-namespace=${KUBE_NAMESPACE}"
      echo "  📊 workloads : https://grafana.fabrique.social.gouv.fr/d/a87fb0d919ec0ea5f6543124e16c42a5/kubernetes-compute-resources-namespace-workloads?orgId=1&refresh=10s&var-datasource=default&var-cluster=${GRAFANA_CLUSTER}&var-namespace=${KUBE_NAMESPACE}&var-type=deployment"
      echo "  🔎 rancher : https://rancher.fabrique.social.gouv.fr/p/${RANCHER_PROJECT_ID}/workloads"
      echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  artifacts:
    expire_in: 1 week
    paths:
      - manifest.yaml
    when: always

.deploy_stage:
  stage: Deploy
  extends:
    - .base_deploy_kosko_stage
  cache:
    key: deploy-${CI_COMMIT_REF_SLUG}
    paths:
      - ${CI_PROJECT_DIR}/dotenv.env
      - ${CI_PROJECT_DIR}/.cache
      - ${K8S_FOLDER}/node_modules
  after_script:
    - echo "CI_ENVIRONMENT_URL=${CI_ENVIRONMENT_URL}" >> dotenv.env


.autodevops_production:
  extends:
    - .deploy_stage
  rules:
    - <<: *autodevops_production_rule
  variables:
    KOSKO_APPEND_YAML_FROM: .k8s/environments/prod/manifests
    KUBE_NAMESPACE: ${CI_PROJECT_NAME}
    KOSKO_GENERATE_ARGS: >-
      --env prod "!(_*)"
  environment:
    name: ${AUTO_DEVOPS_PROD_ENVIRONMENT_NAME}
    url: https://${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
Production:
  extends: .autodevops_production